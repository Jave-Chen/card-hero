(window["wj"] = window["wj"] || []).push([[694],{

/***/ 547:
/***/ ((__unusedmodule, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(294);
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// EXTERNAL MODULE: ./node_modules/react-dom/index.js
var react_dom = __webpack_require__(935);
var react_dom_default = /*#__PURE__*/__webpack_require__.n(react_dom);

// EXTERNAL MODULE: ./node_modules/react-router-dom/esm/react-router-dom.js
var react_router_dom = __webpack_require__(727);

// EXTERNAL MODULE: ./node_modules/react-router/esm/react-router.js + 1 modules
var react_router = __webpack_require__(447);

// EXTERNAL MODULE: ./ClientApp/components/shared/appBootstrap.ts
var appBootstrap = __webpack_require__(205);

// EXTERNAL MODULE: ./ClientApp/services/CardCollectionService.ts + 1 modules
var CardCollectionService = __webpack_require__(332);

// EXTERNAL MODULE: ./ClientApp/services/DeckService.ts
var DeckService = __webpack_require__(829);

// EXTERNAL MODULE: ./ClientApp/styles/index.tsx
var styles = __webpack_require__(905);

// EXTERNAL MODULE: ./ClientApp/components/shared/Layout.tsx + 1 modules
var Layout = __webpack_require__(250);

// CONCATENATED MODULE: ./ClientApp/components/deck/Deck.tsx






class Deck_Deck extends react.PureComponent {
    constructor(props) {
        super(props);
        this.state = {};
    }
    async populateCollection() {
        const collection = await CardCollectionService/* default.getCollection */.b.getCollection();
        this.setState((prevState) => ({
            edit: {
                ...prevState.edit,
                ownedCards: collection
            }
        }));
    }
    async populateDeck(id) {
        const decks = await DeckService/* default.getDecks */.b.getDecks({
            ids: [
                id
            ]
        });
        const deck = decks[0];
        this.setState((prevState) => ({
            edit: {
                ...prevState.edit,
                deck: deck
            }
        }));
    }
    async componentDidMount() {
        const deckId = this.props.match.params.id;
        await Promise.all([
            this.populateDeck(deckId),
            this.populateCollection()
        ]);
    }
    async componentWillReceiveProps(nextProps) {
        const deckId = this.props.match.params.id;
        if (nextProps.match.params.id !== deckId) {
            await this.populateDeck(deckId);
        }
    }
    render() {
        const edit = this.state.edit;
        if (!edit) {
            return null;
        }
        const deck = edit.deck;
        if (!deck) {
            return null;
        }
        const ownedCards = edit.ownedCards;
        const usedCards = deck.cards;
        return (react_default().createElement(Layout/* default */.b, null,
            react_default().createElement("div", { className: "row" },
                react_default().createElement("div", { className: "col-lg-4" },
                    react_default().createElement("div", { className: "card" },
                        react_default().createElement("div", { className: "card-body" },
                            react_default().createElement("h4", { className: "card-title" },
                                react_default().createElement(react_router_dom/* Link */.d, { to: '/' + deck.id }, deck.name),
                                react_default().createElement(styles.default, { icon: "star", className: 'deck-favourite float-right' + (deck.isFavourited ? ' enabled' : ''), "data-deck-id": deck.id })),
                            react_default().createElement("p", { className: "card-text" }, deck.description)),
                        react_default().createElement("div", { className: "card-footer" },
                            react_default().createElement("button", { type: "button", id: "save-deck", className: "btn btn-success pull-right", "data-deck-id": deck.id }, "Save")))),
                react_default().createElement("div", { className: "col-lg-4" },
                    react_default().createElement("div", { className: "card" },
                        react_default().createElement("div", { className: "card-body" },
                            react_default().createElement("h4", { className: "card-title" }, "Owned Cards"),
                            react_default().createElement("div", { className: "card-text" },
                                react_default().createElement("ul", { id: "owned-cards", className: "ch-cards droppable" }, ownedCards && ownedCards.map(cc => react_default().createElement("li", { className: "ch-card draggable", "data-card-collection-id": cc.id }, cc.card.name))))))),
                react_default().createElement("div", { className: "col-lg-4" },
                    react_default().createElement("div", { className: "card" },
                        react_default().createElement("div", { className: "card-body" },
                            react_default().createElement("h4", { className: "card-title" }, "Current Deck"),
                            react_default().createElement("div", { className: "card-text" },
                                react_default().createElement("ul", { id: "used-cards", className: "ch-cards droppable", "data-max-cards": deck.maxCards }, usedCards && usedCards.map(cc => react_default().createElement("li", { className: "ch-card draggable", "data-card-collection-id": cc.cardCollectionId }, cc.name))))))))));
    }
}

// EXTERNAL MODULE: ./ClientApp/constants/constants.ts
var constants = __webpack_require__(200);

// CONCATENATED MODULE: ./ClientApp/components/deck/DeckList.tsx



function DeckList(props) {
    return (react_default().createElement("div", { className: "row" },
        react_default().createElement("table", { className: "table table-striped" },
            react_default().createElement("thead", { className: "thead-inverse" },
                react_default().createElement("tr", null,
                    react_default().createElement("th", null, "Name"))),
            react_default().createElement("tbody", null, props.decks.map(d => react_default().createElement("tr", { key: d.id },
                react_default().createElement("th", { scope: "row" },
                    react_default().createElement(styles.default, { icon: "star", className: 'deck-favourite' + (d.isFavourited ? ' enabled' : ''), "data-deck-id": d.id }),
                    ' ',
                    react_default().createElement(react_router_dom/* Link */.d, { to: '/' + d.id }, d.name))))))));
}

// EXTERNAL MODULE: ./node_modules/react-bootstrap/es/Modal.js + 17 modules
var Modal = __webpack_require__(159);

// EXTERNAL MODULE: ./ClientApp/utils/nameof.ts
var nameof = __webpack_require__(292);

// CONCATENATED MODULE: ./ClientApp/components/deck/DeckCreateModal.tsx



class DeckCreateModal_DeckCreateModal extends react.Component {
    constructor(props) {
        super(props);
        this.state = DeckCreateModal_DeckCreateModal.defaultState;
    }
    onCreated() {
        this.props.onHide();
        if (this.props.onCreated) {
            const { name, description } = this.state;
            this.props.onCreated({ name, description });
        }
    }
    onInputChange(prop, e) {
        const newState = {};
        newState[prop] = e.target.value;
        this.setState(newState, () => {
            this.setState({ canSave: this.canSave() });
        });
    }
    canSave() {
        return !!this.state.name;
    }
    onExited() {
        this.setState(DeckCreateModal_DeckCreateModal.defaultState);
    }
    render() {
        return (react_default().createElement(Modal/* default */.b, Object.assign({}, this.props, { onExited: () => this.onExited, centered: true }),
            react_default().createElement(Modal/* default.Header */.b.Header, { closeButton: true },
                react_default().createElement(Modal/* default.Title */.b.Title, null, "Create Deck")),
            react_default().createElement(Modal/* default.Body */.b.Body, null,
                react_default().createElement("div", { className: "row" },
                    react_default().createElement("div", { className: "container" },
                        react_default().createElement("form", { className: "form auto-post" },
                            react_default().createElement("div", { className: "form-group" },
                                react_default().createElement("label", { htmlFor: "mName" }, "Name"),
                                react_default().createElement("input", { type: "text", id: "mName", className: "form-control", placeholder: "Name", value: this.state.name, onChange: (e) => this.onInputChange((0,nameof/* nameof */.p)('name'), e) })),
                            react_default().createElement("div", { className: "form-group" },
                                react_default().createElement("label", { htmlFor: "mDescription" }, "Description"),
                                react_default().createElement("input", { type: "text", id: "mDescription", className: "form-control", placeholder: "Description", value: this.state.description, onChange: (e) => this.onInputChange((0,nameof/* nameof */.p)('description'), e) })))))),
            react_default().createElement(Modal/* default.Footer */.b.Footer, null,
                react_default().createElement("button", { type: "button", className: "btn btn-secondary", onClick: this.props.onHide }, "Close"),
                react_default().createElement("button", { type: "button", className: "btn btn-success", onClick: () => this.onCreated(), disabled: !this.state.canSave }, "OK"))));
    }
}
DeckCreateModal_DeckCreateModal.defaultState = {
    name: undefined,
    description: undefined,
    canSave: false
};

// CONCATENATED MODULE: ./ClientApp/components/deck/DeckSearch.tsx




class DeckSearch_DeckSearch extends react.Component {
    constructor(props) {
        super(props);
        this.state = {
            modalShown: false
        };
    }
    async componentDidMount() {
        await this.getDecks();
    }
    async getDecks(e) {
        if (e != null) {
            e.preventDefault();
            e.stopPropagation();
        }
        var decks = await DeckService/* default.getDecks */.b.getDecks(this.state);
        if (this.props.onDecksPopulated) {
            this.props.onDecksPopulated(decks);
        }
    }
    onInputChange(prop, e) {
        const newState = {};
        newState[prop] = e.target.value;
        this.setState(newState);
    }
    onSelectChange(prop, e) {
        const newState = {};
        newState[prop] = e.target.value;
        this.setState(newState);
    }
    async onDeckCreated(deck) {
        await DeckService/* default.createDeck */.b.createDeck(deck);
        await this.getDecks();
    }
    render() {
        return (react_default().createElement(react.Fragment, null,
            react_default().createElement("div", { className: "card" },
                react_default().createElement("h4", { className: "card-header" }, "Decks"),
                react_default().createElement("form", { method: "get", className: "search-filter deck-filter" },
                    react_default().createElement("div", { className: "card-body" },
                        react_default().createElement("div", { className: "form-group" },
                            react_default().createElement("input", { type: "text", name: "name", className: "form-control", placeholder: "Name", value: this.state.name, onChange: (e) => this.onInputChange('name', e) })),
                        react_default().createElement("div", { className: "form-group" },
                            react_default().createElement("select", { name: "pageSize", className: "form-control", value: this.state.pageSize, onChange: (e) => this.onSelectChange('pageSize', e) },
                                react_default().createElement("option", { value: "10" }, "10"),
                                react_default().createElement("option", { value: "25" }, "25"),
                                react_default().createElement("option", { value: "50" }, "50"),
                                react_default().createElement("option", { value: "100" }, "100")))),
                    react_default().createElement("div", { className: "card-footer" },
                        react_default().createElement("button", { type: "button", className: "btn btn-success auto-modal", onClick: () => this.setState({ modalShown: true }) },
                            react_default().createElement(styles.default, { icon: "plus" })),
                        react_default().createElement("button", { type: "submit", className: "btn btn-primary pull-right", onClick: (e) => this.getDecks(e) }, "Filter"),
                        react_default().createElement("div", { className: "clearfix" })))),
            react_default().createElement(DeckCreateModal_DeckCreateModal, { show: this.state.modalShown, onCreated: (deck) => this.onDeckCreated(deck), onHide: () => this.setState({ modalShown: false }) })));
    }
}

// CONCATENATED MODULE: ./ClientApp/components/deck/DeckApp.tsx





class DeckApp_DeckApp extends react.Component {
    constructor(props) {
        super(props);
        this.state = { decks: [] };
    }
    onDecksPopulated(decks) {
        if (constants/* default.Debug */.b.Debug) {
            if (decks != null) {
                decks.forEach(deck => {
                    console.log(deck);
                });
            }
        }
        this.setState({
            decks: decks
        });
    }
    render() {
        return (react_default().createElement(Layout/* default */.b, { sideContent: react_default().createElement(DeckSearch_DeckSearch, { onDecksPopulated: (x) => this.onDecksPopulated(x) }) },
            react_default().createElement(DeckList, { decks: this.state.decks })));
    }
}

// CONCATENATED MODULE: ./ClientApp/components/deck/index.tsx






react_dom_default().render(react_default().createElement(react_router_dom/* BrowserRouter */.r, { basename: appBootstrap/* default.url */.b.url('Deck') },
    react_default().createElement(react_router/* Switch */.e, null,
        react_default().createElement(react_router/* Route */.y, { path: "/", exact: true, component: DeckApp_DeckApp }),
        react_default().createElement(react_router/* Route */.y, { path: "/:id", component: Deck_Deck }))), appBootstrap/* default.rootElement */.b.rootElement);


/***/ })

},[[547,712,736]]]);
(window["wj"] = window["wj"] || []).push([[5],{

/***/ "HLzV":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__("q1tI");
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// EXTERNAL MODULE: ./node_modules/react-dom/index.js
var react_dom = __webpack_require__("i8i4");
var react_dom_default = /*#__PURE__*/__webpack_require__.n(react_dom);

// EXTERNAL MODULE: ./node_modules/react-router-dom/esm/react-router-dom.js
var react_router_dom = __webpack_require__("55Ip");

// EXTERNAL MODULE: ./node_modules/react-router/esm/react-router.js + 1 modules
var react_router = __webpack_require__("Ty5D");

// EXTERNAL MODULE: ./ClientApp/components/shared/appBootstrap.ts
var appBootstrap = __webpack_require__("QBAw");

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/index.js + 31 modules
var esm = __webpack_require__("IYwU");

// EXTERNAL MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/index.js + 13 modules
var dist_esm = __webpack_require__("qJlv");

// EXTERNAL MODULE: ./ClientApp/services/GameService.ts + 2 modules
var GameService = __webpack_require__("CsQV");

// EXTERNAL MODULE: ./ClientApp/components/shared/Layout.tsx + 1 modules
var Layout = __webpack_require__("Xvn6");

// EXTERNAL MODULE: ./ClientApp/models/GameType.ts
var GameType = __webpack_require__("WYf1");

// EXTERNAL MODULE: ./ClientApp/constants/constants.ts
var constants = __webpack_require__("m7Oc");

// EXTERNAL MODULE: ./ClientApp/models/GameTripleTrialMoveModel.ts
var GameTripleTrialMoveModel = __webpack_require__("3s4B");

// EXTERNAL MODULE: ./ClientApp/components/shared/CardWidget.tsx + 1 modules
var CardWidget = __webpack_require__("HM8e");

// EXTERNAL MODULE: ./ClientApp/components/shared/dragType.ts
var dragType = __webpack_require__("Mu7O");

// CONCATENATED MODULE: ./ClientApp/components/game/tripletriad/GameTripleTriadBoardGrid.tsx




const GameTripleTriadBoardGrid = (props) => {
    const [{ isOver }, drop] = Object(esm["d" /* useDrop */])({
        accept: dragType["a" /* default */].Card.toString(),
        drop: (item) => {
            if (props.onDrop) {
                props.onDrop({
                    row: props.row,
                    column: props.column,
                    cardCollectionId: item.cardCollectionId
                });
            }
        },
        collect: monitor => ({
            isOver: !!monitor.isOver(),
        }),
    });
    return (react_default.a.createElement("div", { ref: drop, className: 'card col-4 d-inline-block ch-card game-card' + (props.isSelected ? ' selected' : '') + (isOver ? ' bg-primary' : ''), "data-row": props.row, "data-column": props.column },
        react_default.a.createElement("div", { className: "card-body" }, props.card &&
            react_default.a.createElement(CardWidget["a" /* default */], { card: props.card }))));
};
/* harmony default export */ var tripletriad_GameTripleTriadBoardGrid = (GameTripleTriadBoardGrid);

// CONCATENATED MODULE: ./ClientApp/components/game/tripletriad/GameTripleTriadBoard.tsx





class GameTripleTriadBoard_GameTripleTriadBoard extends react["Component"] {
    constructor(props) {
        super(props);
        this.state = {
            data: props.game.data
        };
    }
    componentDidMount() {
        this.setState({
            data: this.props.game.data
        });
    }
    isSelected(row, column) {
        return this.state.data.moves.findIndex(x => x.row == row && x.column == column) > -1;
    }
    getCardCollectionId(row, column) {
        const move = this.state.data.moves.find(x => x.row == row && x.column == column);
        return move ? move.cardCollectionId : null;
    }
    getCardCollectionCard(cardCollectionId) {
        const card = this.props.game.deck.cards.find(x => x.cardCollectionId == cardCollectionId);
        return card;
    }
    async onCardDropped(data) {
        if (constants["a" /* default */].Debug) {
            console.log(data);
        }
        await GameService["a" /* default */].move(this.props.game.id, new GameTripleTrialMoveModel["a" /* default */]().from(data));
    }
    getGameGrid() {
        const grids = [];
        const data = this.state.data;
        let key = 0;
        for (var i = 0; i < data.rows; i++) {
            key++;
            for (var j = 0; j < data.columns; j++) {
                key++;
                const cardCollectionId = this.getCardCollectionId(i, j);
                const card = this.getCardCollectionCard(cardCollectionId);
                grids.push(react_default.a.createElement(tripletriad_GameTripleTriadBoardGrid, { key: key, row: i, column: j, card: card, isSelected: this.isSelected(i, j), onDrop: (x) => this.onCardDropped(x) }));
            }
        }
        return grids;
    }
    render() {
        const grid = this.state.data ? this.getGameGrid() : null;
        return (react_default.a.createElement("div", { id: "current-game", className: "card-text ch-cards game-cards", "data-game-id": this.props.game.id }, grid));
    }
}

// CONCATENATED MODULE: ./ClientApp/components/game/GameBoard.tsx



class GameBoard_GameBoard extends react["Component"] {
    constructor(props) {
        super(props);
    }
    getGameBoard() {
        if (!this.props.game) {
            return GameBoard_GameBoard.nullGameBoard;
        }
        switch (this.props.game.type) {
            case GameType["a" /* default */].TripleTriad:
                return react_default.a.createElement(GameTripleTriadBoard_GameTripleTriadBoard, { game: this.props.game });
            default:
                return GameBoard_GameBoard.nullGameBoard;
        }
    }
    render() {
        const gameBoard = this.getGameBoard();
        return (react_default.a.createElement("div", { className: "card" },
            react_default.a.createElement("div", { className: "card-body" }, gameBoard)));
    }
}
GameBoard_GameBoard.nullGameBoard = react_default.a.createElement("p", null, "No game selected");

// CONCATENATED MODULE: ./ClientApp/components/game/GameDeckCard.tsx




function GameDeckCard(props) {
    const dc = props.card;
    const [{ isDragging }, drag] = Object(esm["c" /* useDrag */])({
        item: {
            type: dragType["a" /* default */].Card.toString(),
            cardCollectionId: dc.cardCollectionId
        },
        collect: monitor => ({
            isDragging: !!monitor.isDragging(),
        }),
    });
    return (react_default.a.createElement("div", { ref: drag, className: 'current-card' + (dc.isUsable ? '' : ' bg-secondary text-white disabled') + (isDragging ? ' bg-primary' : ''), "data-card-collection-id": dc.cardCollectionId },
        react_default.a.createElement(CardWidget["a" /* default */], { card: dc })));
}

// CONCATENATED MODULE: ./ClientApp/components/game/GameDeckWidget.tsx


function GameDeckWidget(props) {
    return (react_default.a.createElement("div", { className: "card" },
        react_default.a.createElement("h4", { className: "card-header" },
            react_default.a.createElement("a", null, "You")),
        react_default.a.createElement("div", { className: "card-body" },
            react_default.a.createElement("div", { className: "card-text" }, props.deck ?
                (react_default.a.createElement("div", { id: "current-deck", className: "ch-cards", "data-max-cards": props.deck.maxCards }, props.deck.cards.map(x => react_default.a.createElement(GameDeckCard, { key: x.id, card: x }))))
                :
                    (react_default.a.createElement("p", null, "No deck selected"))))));
}

// EXTERNAL MODULE: ./ClientApp/components/shared/DateFormat.tsx + 1 modules
var DateFormat = __webpack_require__("PaiT");

// CONCATENATED MODULE: ./ClientApp/components/game/GameDetailWidget.tsx




class GameDetailWidget_GameDetailWidget extends react["Component"] {
    constructor(props) {
        super(props);
    }
    render() {
        const game = this.props.game;
        return (react_default.a.createElement("div", { className: "card" },
            react_default.a.createElement("h4", { className: "card-header" }, game ?
                (react_default.a.createElement(react_router_dom["b" /* Link */], { to: '/' + game.id }, game.name))
                :
                    (react_default.a.createElement("span", null, "Unknown"))),
            react_default.a.createElement("div", { className: "card-body" },
                react_default.a.createElement("div", { className: "card-text" },
                    react_default.a.createElement("div", null,
                        react_default.a.createElement("strong", null, "Type:"),
                        ' ',
                        game ?
                            (react_default.a.createElement("span", null, GameType["a" /* default */][game.type]))
                            :
                                (react_default.a.createElement("span", null, "Unknown"))),
                    react_default.a.createElement("div", null,
                        react_default.a.createElement("strong", null, "Start Time:"),
                        ' ',
                        game ?
                            (react_default.a.createElement(DateFormat["a" /* default */], { date: game.startTime }))
                            :
                                (react_default.a.createElement("span", null, "Unknown")))))));
    }
}

// CONCATENATED MODULE: ./ClientApp/components/game/GameHistoryWidget.tsx


class GameHistoryWidget_GameHistoryWidget extends react["Component"] {
    constructor(props) {
        super(props);
    }
    render() {
        const game = this.props.game;
        return (react_default.a.createElement("div", { className: "card" },
            react_default.a.createElement("h4", { id: "history-heading", className: "card-header" },
                react_default.a.createElement("a", { href: "#history-collapse", "data-toggle": "collapse", "aria-expanded": "true", "aria-controls": "history-collapse" }, "History")),
            react_default.a.createElement("div", { className: "card-body" },
                react_default.a.createElement("div", { className: "card-text" },
                    react_default.a.createElement("div", { id: "history-collapse", className: "collapse show", role: "tabpanel", "aria-labelledby": "history-heading" },
                        react_default.a.createElement("ul", null, game ?
                            (react_default.a.createElement("li", null,
                                "Game Started at ",
                                react_default.a.createElement(DateFormat["a" /* default */], { date: game.startTime })))
                            :
                                (react_default.a.createElement("li", null, "Unknown"))))))));
    }
}

// CONCATENATED MODULE: ./ClientApp/components/game/Game.tsx









class Game_Game extends react["Component"] {
    constructor(props) {
        super(props);
        this.state = {};
    }
    async populateGame(id) {
        const game = await GameService["a" /* default */].getGameById(id);
        if (game) {
            this.setState({
                game: game,
                deck: game.deck
            });
        }
    }
    async componentDidMount() {
        const gameId = this.props.match.params.id;
        await this.populateGame(gameId);
    }
    async componentWillReceiveProps(nextProps) {
        const gameId = this.props.match.params.id;
        if (nextProps.match.params.id !== gameId) {
            await this.populateGame(gameId);
        }
    }
    render() {
        const game = this.state.game;
        return (react_default.a.createElement(Layout["a" /* default */], null,
            react_default.a.createElement(esm["b" /* DndProvider */], { backend: dist_esm["a" /* default */] },
                react_default.a.createElement("div", { className: "row" },
                    react_default.a.createElement("div", { className: "col-lg-3" },
                        react_default.a.createElement(GameDetailWidget_GameDetailWidget, { game: game }),
                        react_default.a.createElement(GameHistoryWidget_GameHistoryWidget, { game: game })),
                    react_default.a.createElement("div", { className: "col-lg-6" },
                        react_default.a.createElement(GameBoard_GameBoard, { game: game })),
                    react_default.a.createElement("div", { className: "col-lg-3" },
                        react_default.a.createElement(GameDeckWidget, { deck: this.state.deck }))))));
    }
}

// CONCATENATED MODULE: ./ClientApp/components/game/GameList.tsx



function GameList(props) {
    return (react_default.a.createElement("div", { className: "row" },
        react_default.a.createElement("table", { className: "table table-striped" },
            react_default.a.createElement("thead", { className: "thead-inverse" },
                react_default.a.createElement("tr", null,
                    react_default.a.createElement("th", null, "Game"),
                    react_default.a.createElement("th", null, "Start Time"))),
            react_default.a.createElement("tbody", null, props.games.map(g => react_default.a.createElement("tr", { key: g.id },
                react_default.a.createElement("th", { scope: "row" },
                    react_default.a.createElement(react_router_dom["b" /* Link */], { to: '/' + g.id },
                        "#",
                        g.id,
                        ' ',
                        g.name)),
                react_default.a.createElement("td", null,
                    react_default.a.createElement(DateFormat["a" /* default */], { date: g.startTime }))))))));
}

// EXTERNAL MODULE: ./ClientApp/services/DeckService.ts
var DeckService = __webpack_require__("qE4i");

// EXTERNAL MODULE: ./ClientApp/styles/index.tsx
var styles = __webpack_require__("ocCX");

// EXTERNAL MODULE: ./node_modules/react-bootstrap/es/Modal.js + 18 modules
var Modal = __webpack_require__("frVR");

// EXTERNAL MODULE: ./ClientApp/utils/nameof.ts
var nameof = __webpack_require__("ROx7");

// CONCATENATED MODULE: ./ClientApp/components/game/GameCreateModal.tsx




class GameCreateModal_GameCreateModal extends react["Component"] {
    constructor(props) {
        super(props);
        this.state = GameCreateModal_GameCreateModal.defaultState;
    }
    onCreated() {
        this.props.onHide();
        if (this.props.onCreated) {
            const { name, type, deckId } = this.state;
            this.props.onCreated({ name, type, deckId });
        }
    }
    onInputChange(prop, e) {
        const newState = {};
        newState[prop] = e.target.value;
        this.setState(newState, () => {
            this.setState({ canSave: this.canSave() });
        });
    }
    onSelectChange(prop, e) {
        const newState = {};
        newState[prop] = parseInt(e.target.value);
        this.setState(newState, () => {
            this.setState({ canSave: this.canSave() });
        });
    }
    canSave() {
        return !!this.state.name && !!this.state.type && !!this.state.deckId;
    }
    onExited() {
        this.setState(GameCreateModal_GameCreateModal.defaultState);
    }
    render() {
        return (react_default.a.createElement(Modal["a" /* default */], Object.assign({}, this.props, { onExited: () => this.onExited, centered: true }),
            react_default.a.createElement(Modal["a" /* default */].Header, { closeButton: true },
                react_default.a.createElement(Modal["a" /* default */].Title, null, "Create Game")),
            react_default.a.createElement(Modal["a" /* default */].Body, null,
                react_default.a.createElement("div", { className: "row" },
                    react_default.a.createElement("div", { className: "container" },
                        react_default.a.createElement("form", { className: "form auto-post" },
                            react_default.a.createElement("div", { className: "form-group" },
                                react_default.a.createElement("label", { htmlFor: "mName" }, "Name"),
                                react_default.a.createElement("input", { type: "text", id: "mName", className: "form-control", placeholder: "Name", value: this.state.name, onChange: (e) => this.onInputChange(Object(nameof["a" /* nameof */])('name'), e) })),
                            react_default.a.createElement("div", { className: "form-group" },
                                react_default.a.createElement("label", { htmlFor: "mType" }, "Type"),
                                react_default.a.createElement("select", { id: "mType", className: "form-control", value: this.state.type, onChange: (e) => this.onSelectChange(Object(nameof["a" /* nameof */])('type'), e) },
                                    react_default.a.createElement("option", { value: "1" }, "Triple Triad"))),
                            react_default.a.createElement("div", { className: "form-group" },
                                react_default.a.createElement("label", { htmlFor: "mDeckId" }, "Deck"),
                                react_default.a.createElement("select", { id: "mDeckId", className: "form-control", value: this.state.deckId, onChange: (e) => this.onSelectChange(Object(nameof["a" /* nameof */])('deckId'), e) },
                                    react_default.a.createElement("option", null, "Please select"),
                                    this.props.decks.map(x => react_default.a.createElement("option", { value: x.id }, x.name)))))))),
            react_default.a.createElement(Modal["a" /* default */].Footer, null,
                react_default.a.createElement("button", { type: "button", className: "btn btn-secondary", onClick: this.props.onHide }, "Close"),
                react_default.a.createElement("button", { type: "button", className: "btn btn-success", onClick: () => this.onCreated(), disabled: !this.state.canSave }, "OK"))));
    }
}
GameCreateModal_GameCreateModal.defaultState = {
    name: undefined,
    type: GameType["a" /* default */].TripleTriad,
    deckId: undefined,
    canSave: false
};

// CONCATENATED MODULE: ./ClientApp/components/game/GameSearch.tsx






class GameSearch_GameSearch extends react["Component"] {
    constructor(props) {
        super(props);
        this.state = {
            modalShown: false,
            decks: []
        };
    }
    async componentDidMount() {
        Promise.all([
            this.getDecks(),
            this.getGames()
        ]);
    }
    async getDecks() {
        const decks = await DeckService["a" /* default */].getDecks();
        this.setState({
            decks: decks
        });
    }
    async getGames(e) {
        if (e != null) {
            e.preventDefault();
            e.stopPropagation();
        }
        var games = await GameService["a" /* default */].getGames(this.state);
        if (this.props.onGamesPopulated) {
            this.props.onGamesPopulated(games);
        }
    }
    onInputChange(prop, e) {
        const newState = {};
        newState[prop] = e.target.value;
        this.setState(newState);
    }
    onCheckboxChange(prop, e) {
        const newState = {};
        newState[prop] = e.target.checked;
        this.setState(newState);
    }
    onSelectChange(prop, e) {
        const newState = {};
        newState[prop] = e.target.value;
        this.setState(newState);
    }
    async onGameCreated(game) {
        if (constants["a" /* default */].Debug) {
            console.log(game);
        }
        await GameService["a" /* default */].createGame(game);
        await this.getGames();
    }
    render() {
        return (react_default.a.createElement(react["Fragment"], null,
            react_default.a.createElement("div", { className: "card" },
                react_default.a.createElement("h4", { className: "card-header" }, "Games"),
                react_default.a.createElement("form", { method: "get", className: "search-filter game-filter" },
                    react_default.a.createElement("div", { className: "card-body" },
                        react_default.a.createElement("div", { className: "form-group" },
                            react_default.a.createElement("input", { type: "text", name: "name", className: "form-control", placeholder: "Name", value: this.state.name, onChange: (e) => this.onInputChange('name', e) })),
                        react_default.a.createElement("div", { className: "form-check" },
                            react_default.a.createElement("label", { className: "form-check-label" },
                                react_default.a.createElement("input", { type: "checkbox", className: "form-check-input", defaultChecked: this.state.activeOnly, onChange: (e) => this.onCheckboxChange('activeOnly', e) }),
                                ' ',
                                "Active Only")),
                        react_default.a.createElement("div", { className: "form-group" },
                            react_default.a.createElement("select", { name: "pageSize", className: "form-control", value: this.state.pageSize, onChange: (e) => this.onSelectChange('pageSize', e) },
                                react_default.a.createElement("option", { value: "10" }, "10"),
                                react_default.a.createElement("option", { value: "25" }, "25"),
                                react_default.a.createElement("option", { value: "50" }, "50"),
                                react_default.a.createElement("option", { value: "100" }, "100")))),
                    react_default.a.createElement("div", { className: "card-footer" },
                        react_default.a.createElement("button", { type: "button", className: "btn btn-success auto-modal", onClick: () => this.setState({ modalShown: true }) },
                            react_default.a.createElement(styles["default"], { icon: "plus" })),
                        react_default.a.createElement("button", { type: "submit", className: "btn btn-primary pull-right", onClick: (e) => this.getGames(e) }, "Filter"),
                        react_default.a.createElement("div", { className: "clearfix" })))),
            react_default.a.createElement(GameCreateModal_GameCreateModal, { show: this.state.modalShown, onCreated: (game) => this.onGameCreated(game), onHide: () => this.setState({ modalShown: false }), decks: this.state.decks })));
    }
}

// CONCATENATED MODULE: ./ClientApp/components/game/GameApp.tsx





class GameApp_GameApp extends react["Component"] {
    constructor(props) {
        super(props);
        this.state = { games: [] };
    }
    onGamesPopulated(games) {
        if (constants["a" /* default */].Debug) {
            if (games != null) {
                games.forEach(card => {
                    console.log(card);
                });
            }
        }
        this.setState({
            games: games
        });
    }
    render() {
        return (react_default.a.createElement(Layout["a" /* default */], { sideContent: react_default.a.createElement(GameSearch_GameSearch, { onGamesPopulated: (x) => this.onGamesPopulated(x) }) },
            react_default.a.createElement(GameList, { games: this.state.games })));
    }
}

// CONCATENATED MODULE: ./ClientApp/components/game/index.tsx






react_dom_default.a.render(react_default.a.createElement(react_router_dom["a" /* BrowserRouter */], { basename: appBootstrap["a" /* default */].url('Game') },
    react_default.a.createElement(react_router["c" /* Switch */], null,
        react_default.a.createElement(react_router["a" /* Route */], { path: "/", exact: true, component: GameApp_GameApp }),
        react_default.a.createElement(react_router["a" /* Route */], { path: "/:id", component: Game_Game }))), appBootstrap["a" /* default */].rootElement);


/***/ })

},[["HLzV",0,1]]]);
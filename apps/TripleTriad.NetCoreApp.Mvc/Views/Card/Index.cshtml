@model SearchCardViewModel

@{
    ViewData["Title"] = "Cards";
}

<h2>@ViewData["Title"]</h2>

<form method="get" class="form-inline search-filter card-filter">
	<div class="form-group">
		<div class="input-group">
			@Html.TextBoxFor(x => x.Name, new { @class = "form-control", placeholder = Html.DisplayNameFor(x => x.Name) })
			@Html.SortableDropDownList(typeof(CardViewModel), htmlAttributes: new { @class = "form-control" }, selectedValue: Model.Sort)
			@Html.SortableDirectionDropDownList(htmlAttributes: new { @class = "form-control" }, selectedValue: Model.SortDir)
			<span class="input-group-btn">
				<button type="submit" class="btn btn-primary">Filter</button>
			</span>
		</div>
	</div>
</form>

<hr />

<div class="cards user-select-none">
	@foreach (var card in Model.Cards)
	{
		<div class="card transition pointer" style="background-image: url(@Url.Content($"~/images/cards/{card.Id}.png"))" data-card-id="@card.Id">
			<div class="card-name">
				@card.Name
			</div>
		</div>
	}
</div>

@section styles {
	<environment names="Development">
		<link rel="stylesheet" href="~/css/cards.css" />
	</environment>
}

@section scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
	<environment names="Development">
		<script src="~/js/cards.js"></script>
	</environment>
}

@using System.Text.RegularExpressions;

@model SearchPlayerViewModel

@{
	ViewData["Title"] = "Players";
}

<h2>@ViewData["Title"]</h2>

<form method="get" class="form-inline search-filter player-filter">
	<div class="form-group">
		<div class="input-group">
			@Html.TextBoxFor(x => x.Name, new { @class = "form-control", placeholder = Html.DisplayNameFor(x => x.Name) })
			@Html.SortableDropDownList(typeof(CardViewModel), htmlAttributes: new { @class = "form-control" }, selectedValue: Model.Sort)
			@Html.SortableDirectionDropDownList(htmlAttributes: new { @class = "form-control" }, selectedValue: Model.SortDir)
			<span class="input-group-btn">
				<button type="submit" class="btn btn-primary">Filter</button>
			</span>
		</div>
	</div>
</form>

<hr />

<div class="players">
	<table class="table table-bordered table-striped">
		<thead>
			<tr>
				<th>@Html.DisplayNameFor(x => x.Name)</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var player in Model.Players)
			{
				<tr class="player" data-player-id="@player.Id">
					<td>
						<a asp-action="Details" asp-route-id="@player.Id">
							@if (string.IsNullOrEmpty(Model.Name))
							{
								@player.Name
							}
							else
							{
								var playerName = HtmlEncoder.Encode(player.Name);
								var modelName = HtmlEncoder.Encode(Model.Name);

								@Html.Raw(Regex.Replace(playerName, modelName, $"<span class=\"highlight\">$0</span>", RegexOptions.IgnoreCase))
							}
						</a>
					</td>
				</tr>
			}
		</tbody>
	</table>
</div>

@section styles {
	<environment names="Development">
		<link rel="stylesheet" href="~/css/players.css" />
	</environment>
}

@section scripts {
	@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
	<environment names="Development">
		<script src="~/js/players.js"></script>
	</environment>
}
